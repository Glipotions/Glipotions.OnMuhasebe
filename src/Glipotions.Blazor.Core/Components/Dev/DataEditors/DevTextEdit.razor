@inherits DevBaseEditor

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxTextBox @ref="_dxTextBox"
                   @bind-Text="@Value"
                   ClearButtonDisplayMode="ClearButtonDisplayMode"
                   CssClass="@EditorCssClass"
                   Enabled="Enabled"
                   InputCssClass="@InputCssClass"
                   NullText="@NullText"
                   ReadOnly="ReadOnly">
        </DxTextBox>
    </Template>
</DxGridLayoutItem>

@*  ÖZET
    Caption'un 2 önceki Columnda olması için ColumnIndex -2 yapıldı
    Bir Genel Text'in Visible'a bakar sonra Caption'un Visible ına bakılır.
*@
<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>

@*  TEXTBOX PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. css izolasyon kullanılamıyor.
    ClearButtonDisplayMode= tıklandığında metindeki yazıyı siler.
    NullText= Boşken Bir şey yazılmasıyla ilgili.

    @ref = _dxTextBox DxTextBox tipinin referansıdır. Bu DxTextBox'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan textin değerini
        değiştirmişse bind kullanılmazsa text dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    Text'e bind uygulanırsa mutlaka text changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi.


    Value= text parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged Tetiklenebilir bir Eventtir, InvokeAsync çalıştır demektir.
        _value ile value değeri birbirine eşit olmadığında yani _value değeri değiştiğinde
        çalıştırılacak event olmuş olur. Yani bir değişiklik olduğunda değişikliği yakalar
        *** ÖNEMLİ ***

    OnAfterRenderAsync= ilk kez render olduğunda text'e focuslanmasını sağlar.
*@
@code {

    private DxTextBox _dxTextBox;
    private string _value;

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxTextBox.FocusAsync();
    }
}