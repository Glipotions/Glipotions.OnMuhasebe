@inherits DevBaseEditor

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxDateEdit @ref="_dxDateEdit"
                    @bind-Date="@Value"
                    CssClass="@EditorCssClass"
                    Enabled="Enabled"
                    InputCssClass="@InputCssClass"
                    Mask="@DateTimeMask.ShortDate"
                    ReadOnly="ReadOnly">
            <MaskProperties>
                <DxDateTimeMaskProperties CaretMode="MaskCaretMode.Advancing"
                                          Culture="CultureInfo.CurrentCulture" />
            </MaskProperties>
        </DxDateEdit>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>

@*  DATEEDIT PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. css izolasyon kullanılamıyor.
    ClearButtonDisplayMode= tıklandığında metindeki yazıyı siler.
    NullText= Boşken Bir şey yazılmasıyla ilgili.
    Mask= DateEdit'in görünümünü ayarlar.
    CaretMode="MaskCaretMode.Advancing ise tarih yazarken noktadan sonra otomatik geçişi sağlar.
    CurrentCulture=Hangi ülkede çalıştırılıyorsa ona göre format düzenler.


    @ref = _dxDateEdit DxDateEdit tipinin referansıdır. Bu DxDateEdit'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan dateEditin değerini
        değiştirmişse bind kullanılmazsa dateEdit dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    Text'e bind uygulanırsa mutlaka dateEdit changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi.


    Value= dateEdit parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged Tetiklenebilir bir Eventtir, InvokeAsync çalıştır demektir.
        _value ile value değeri birbirine eşit olmadığında yani _value değeri değiştiğinde
        çalıştırılacak event olmuş olur. Yani bir değişiklik olduğunda değişikliği yakalar
        *** ÖNEMLİ ***

    OnAfterRenderAsync= ilk kez render olduğunda dateEdit'e focuslanmasını sağlar.
*@
@code {

    private DxDateEdit<DateTime> _dxDateEdit;
    private DateTime _value;

    [Parameter] public EventCallback<DateTime> ValueChanged { get; set; }
    [Parameter]
    public DateTime Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxDateEdit.FocusAsync();
    }
}