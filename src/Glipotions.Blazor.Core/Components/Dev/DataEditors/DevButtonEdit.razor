@inherits DevBaseEditor

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <div class="dxbs-input-group input-group input-group-sm">
            <DxTextBox @ref="_dxTextBox"
                       @bind-Text="@Value"
                       @onkeydown="@KeyDownAsync"
                       @ondblclick="@ClickAsync"
                       CssClass="@EditorCssClass"
                       Enabled="Enabled"
                       InputCssClass="@InputCssClass"
                       NullText="@NullText"
                       ReadOnly="true">
            </DxTextBox>

            <div class="form-control form-control-sm dxbs-btn-group
                        dxbs-input-group-append dxbs-focus-hidden">
                <button class="btn btn-sm dx-btn  btn-secondary" tabindex="-1"
                        @onclick="@ClickAsync" @attributes="@Attributes">
                    <svg class="button-edit" role="img" />
                </button>
            </div>

        </div>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>


@*  BUTTONEDİT PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. css izolasyon kullanılamıyor.

    onkeydown= keydown eventi
    ondblclick=double click eventi

    private Dictionary<string, object> Attributes; = şeklinde Attribute alınır.

    @typeparam TItem = En üstte tanımladık. ButtonEdit'ın içinde kullanılacak type'i almak için kullandık.

    @ref = _dxButtonEdit DxButtonEdit tipinin referansıdır. Bu DxButtonEdit'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan ButtonEditin değerini
        değiştirmişse bind kullanılmazsa ButtonEdit dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    ButtonEdit'a bind uygulanırsa mutlaka ButtonEdit changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi. bind value kullanıldı.


    Value= ButtonEdit parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged= Otomatik olarak tetiklenir, bu yüzden ekstra bir şey yapılmadı.

    OnAfterRenderAsync= ilk kez render olduğunda ButtonEdit'e focuslanmasını sağlar.
*@
@code {

    private DxTextBox _dxTextBox;
    private string _value;
    private Dictionary<string, object> Attributes;

    [Parameter] public ICoreCommonService Service { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback ButtonClickInvokeFunction { get; set; }
    [Parameter] public EventCallback DeleteButtonKeyDownInvokeFunction { get; set; }

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    /// <ÖZET>
    /// 
    /// Eğer enable ise;
    /// ActiveEditComponent seçilir.
    /// ButtonClickInvokeFunction ile tetiklenen event çalışır(InvokeAsync).
    /// 
    /// Görev: Pop-up Menu kapandıktan sonra odağın tekrar buttonEditte olmasını sağlar.
    private async Task ClickAsync()
    {
        if (Enabled)
        {
            Service.ActiveEditComponent = _dxTextBox;
            await ButtonClickInvokeFunction.InvokeAsync();
        }
    }

    private async Task KeyDownAsync(KeyboardEventArgs arg)
    {
        switch (arg.Key)
        {
            case "F2":
                await ClickAsync();
                break;

            case "Delete":
                await DeleteAsync();
                break;
        }
    }

    /// <ÖZET>
    /// 
    /// DeleteButtonKeyDownInvokeFunction Eventi Gönderilmediyse return.
    /// Value temizlenir.
    /// Gelen DeleteButtonKeyDownInvokeFunction Invoke Edilir(Çalıştırılır).
    private async Task DeleteAsync()
    {
        if (!DeleteButtonKeyDownInvokeFunction.HasDelegate) return;
        Value = null;
        await DeleteButtonKeyDownInvokeFunction.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxTextBox.FocusAsync();
    }

    /// <ÖZET>
    /// 
    ///  Görev: Button'un Enabled Durumu false ise disabled yapar.
    protected override void OnParametersSet()
    {
        if (!Enabled)
        {
            Attributes = new Dictionary<string, object>();
            Attributes.Add("disabled", "disabled");
        }
        else
            Attributes?.Remove("disabled");
    }
}