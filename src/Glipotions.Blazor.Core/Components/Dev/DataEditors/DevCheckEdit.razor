@inherits DevBaseEditor

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxCheckBox @ref="_dxCheckBox"
                    @bind-Checked="@Value"
                    Alignment="Alignment"
                    CheckType="CheckType"
                    CssClass="@EditorCssClass"
                    Enabled="Enabled"
                    LabelPosition="LabelPosition">
            <ChildContent>
                @(_value ? TrueCaption : FalseCaption)
            </ChildContent>
        </DxCheckBox>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>

@*  CHECKBOX PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. css izolasyon kullanılamıyor.
    Alignment=Sağ Tarafta mı Sol Tarafta mı Olduğunu Gösterir.
    CheckType= Check şeklini gösterir. switch toggle şeklinde olur.
    LabelPosition= Yazının Hangi tarafta olduğunu belirtir.
    <ChildContent>
         @(_value ? TrueCaption : FalseCaption) Aktif ve Pasif halinde ne yazdığını belirtir.
    </ChildContent>


    ValueChecked, ValueIndeterminate, ValueUnchecked propertyleri ile enum gibi davranılabilir.
        (3/5) 16. Video 14. DK

    @ref = _dxCheckBox DxCheckBox tipinin referansıdır. Bu DxCheckBox'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan CheckBoxin değerini
        değiştirmişse bind kullanılmazsa CheckBox dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    Text'e bind uygulanırsa mutlaka CheckBox changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi.


    Value= CheckBox parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged Tetiklenebilir bir Eventtir, InvokeAsync çalıştır demektir.
        _value ile value değeri birbirine eşit olmadığında yani _value değeri değiştiğinde
        çalıştırılacak event olmuş olur. Yani bir değişiklik olduğunda değişikliği yakalar
        *** ÖNEMLİ ***

    OnAfterRenderAsync= ilk kez render olduğunda CheckBox'e focuslanmasını sağlar.
*@
@code {

    private DxCheckBox<bool> _dxCheckBox;
    private bool _value;

    [Parameter] public CheckBoxContentAlignment Alignment { get; set; } = CheckBoxContentAlignment.Right;
    [Parameter] public CheckType CheckType { get; set; } = CheckType.Switch;
    [Parameter] public LabelPosition LabelPosition { get; set; } = LabelPosition.Left;
    [Parameter] public string TrueCaption { get; set; }
    [Parameter] public string FalseCaption { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public override bool SeparateCaptionVisible { get; set; } = false;
    [Parameter] public override bool CaptionVisible { get; set; } = false;

    [Parameter]
    public bool Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxCheckBox.FocusAsync();
    }

}