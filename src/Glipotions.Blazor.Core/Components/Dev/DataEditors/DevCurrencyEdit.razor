@inherits DevBaseEditor

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxMaskedInput @ref="_dxMaskedInput"
                       @bind-Value="@Value"
                       CssClass="@EditorCssClass"
                       DisplayFormat="n2"
                       Enabled="Enabled"
                       InputCssClass="@InputCssClass"
                       Mask="#,###,###,##0.00"
                       ReadOnly="ReadOnly">
            <DxNumericMaskProperties Culture="CultureInfo.CurrentCulture" />
        </DxMaskedInput>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>


@*  CURRENCYEDIT PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. Sağa dayalı olmasını sağlayacak
    NullText= Boşken Bir şey yazılmasıyla ilgili.
    DisplayFormat=n2 formatında gösterilir.
    Mask=#,###,###,##0.00   Bu formata maskler.
    CurrentCulture=Hangi ülkede çalıştırılıyorsa ona göre format düzenler.


    DxCurrencyEdit<decimal> _dxCurrencyEdit= ile içinin int olacağı belirtilir.

    @ref = _dxCurrencyEdit DxCurrencyEdit tipinin referansıdır. Bu DxCurrencyEdit'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan currencyEditin değerini
        değiştirmişse bind kullanılmazsa currencyEdit dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    Text'e bind uygulanırsa mutlaka currencyEdit changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi.


    Value= currencyEdit parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged Tetiklenebilir bir Eventtir, InvokeAsync çalıştır demektir.
        _value ile value değeri birbirine eşit olmadığında yani _value değeri değiştiğinde
        çalıştırılacak event olmuş olur. Yani bir değişiklik olduğunda değişikliği yakalar
        *** ÖNEMLİ ***

    OnAfterRenderAsync= ilk kez render olduğunda currencyEdit'e focuslanmasını sağlar.
*@
@code {

    private DxMaskedInput<decimal> _dxMaskedInput;
    private decimal _value;

    [Parameter] public override string EditorCssClass { get; set; } = "currency";
    [Parameter] public EventCallback<decimal> ValueChanged { get; set; }

    [Parameter]
    public decimal Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxMaskedInput.FocusAsync();
    }

}