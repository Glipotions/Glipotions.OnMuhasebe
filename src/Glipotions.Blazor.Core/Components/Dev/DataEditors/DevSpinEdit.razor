@inherits DevBaseEditor

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxSpinEdit @ref="_dxSpinEdit"
                    @bind-Value="@Value"
                    AllowMouseWheel="true"
                    CssClass="@EditorCssClass"
                    Enabled="Enabled"
                    InputCssClass="@InputCssClass"
                    Mask="@NumericMask.WholeNumber"
                    MaxValue="MaxValue"
                    MinValue="MinValue"
                    ReadOnly="ReadOnly">
        </DxSpinEdit>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>

@*  SPIN PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. css izolasyon kullanılamıyor.
    NullText= Boşken Bir şey yazılmasıyla ilgili.
    Mask=NumericMask.WholeNumber  herhangi bir ayraç olmayacak şekilde maskler.
    Max ve Min Value= alabileceği en yüksek ve en düşük değerler belirtilir.
    AllowMouseWheel= mouse tekerleği ile değeri değiştirip değiştirememeyi belirtir.


    DxSpinEdit<int> _dxSpinEdit= ile içinin int olacağı belirtilir.

    @ref = _dxSpinEdit DxSpinEdit tipinin referansıdır. Bu DxSpinEdit'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan spinEditin değerini
        değiştirmişse bind kullanılmazsa spinEdit dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    Text'e bind uygulanırsa mutlaka spinEdit changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi.


    Value= spinEdit parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged Tetiklenebilir bir Eventtir, InvokeAsync çalıştır demektir.
        _value ile value değeri birbirine eşit olmadığında yani _value değeri değiştiğinde
        çalıştırılacak event olmuş olur. Yani bir değişiklik olduğunda değişikliği yakalar
        *** ÖNEMLİ ***

    OnAfterRenderAsync= ilk kez render olduğunda spinEdit'e focuslanmasını sağlar.
*@
@code {

    private DxSpinEdit<int> _dxSpinEdit;
    private int _value;

    [Parameter] public int MaxValue { get; set; } = 100;
    [Parameter] public int MinValue { get; set; } = 0;
    [Parameter] public override string EditorCssClass { get; set; } = "number";
    [Parameter] public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public int Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxSpinEdit.FocusAsync();
    }

}