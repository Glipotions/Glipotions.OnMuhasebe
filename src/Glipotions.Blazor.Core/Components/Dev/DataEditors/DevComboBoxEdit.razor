@inherits DevBaseEditor
@typeparam TItem

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxComboBox @ref="_dxComboBox"
                    @bind-Value="@Value"
                    CssClass="@EditorCssClass"
                    Data="DataSource"
                    Enabled="Enabled"
                    InputCssClass="@InputCssClass"
                    ReadOnly="ReadOnly"
                    TextFieldName="@TextFieldName"
                    SelectedItemChanged="SelectedItemChanged">
        </DxComboBox>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>

@*  COMBOBOX PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. css izolasyon kullanılamıyor.
    Data= Hangi verileri listeleyeceğini belirtilir. IEnumerable tipinde veriler alır.
    TextFieldName= Combobax'a gönderilen verilerden kullanıcı hangisini görecekse belirtilir.
    SelectedItemChanged= Seçilen itemin görünmesini sağlayan özellik.

    Action=Parametre alan ancak geriye değer döndürmeyendir.

    private DxComboBox<TItem, TItem> _dxComboBox; = her türlü değer gönderilebilir.


    @typeparam TItem = En üstte tanımladık. combobox'ın içinde kullanılacak type'i almak için kullandık.

    @ref = _dxComboBox DxComboBox tipinin referansıdır. Bu DxComboBox'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan ComboBoxin değerini
        değiştirmişse bind kullanılmazsa ComboBox dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    Combobox'a bind uygulanırsa mutlaka ComboBox changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi. bind value kullanıldı.


    Value= ComboBox parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged= Otomatik olarak tetiklenir, bu yüzden ekstra bir şey yapılmadı.

    OnAfterRenderAsync= ilk kez render olduğunda ComboBox'e focuslanmasını sağlar.
*@
@code {

    private DxComboBox<TItem, TItem> _dxComboBox;

    [Parameter, EditorRequired] public IEnumerable<TItem> DataSource { get; set; }
    [Parameter] public string TextFieldName { get; set; }
    [Parameter] public Action<TItem> SelectedItemChanged { get; set; }
    [Parameter, EditorRequired] public TItem Value { get; set; }
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxComboBox.FocusAsync();
    }

}