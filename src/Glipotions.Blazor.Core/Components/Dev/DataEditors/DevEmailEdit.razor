@inherits DevBaseEditor

<DxGridLayoutItem Column="ColumnIndex"
                  ColumnSpan="ColumnSpan"
                  CssClass="@LayoutItemCssClass"
                  Row="RowIndex"
                  RowSpan="RowSpan"
                  Visible="Visible">
    <Template>
        <DxMaskedInput @ref="_dxMaskedInput"
                       @bind-Value="@Value"
                       CssClass="@EditorCssClass"
                       Enabled="Enabled"
                       InputCssClass="@InputCssClass"
                       Mask="@(@"(\w|[.-])+@(\w|-)+\.(\w|-){2,4}")"
                       ReadOnly="ReadOnly"
                       MaskMode="MaskMode.RegEx">
        </DxMaskedInput>
    </Template>
</DxGridLayoutItem>

<DevLabel Caption="@Caption"
          ColumnIndex="ColumnIndex-2"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && CaptionVisible">
</DevLabel>

<DevLabel Caption="@SeparateCaption"
          ColumnIndex="ColumnIndex-1"
          CssClass="@CaptionCssClass"
          RowIndex="RowIndex"
          Visible="Visible && SeparateCaptionVisible">
</DevLabel>

@*  EMAIL PROPERTIES

    Caption= Label da yazılan değer.
    ColumnIndex ve RowIndex= Konum Seçme,
    ColumnSpan ve RowSpan= Birleştirme sayısı örn: 2 kolon birleştirilir.
    CssClass = css te yapılan değişiklikler uygulanır. Sağa dayalı olmasını sağlayacak
    NullText= Boşken Bir şey yazılmasıyla ilgili.
    DisplayFormat=n2 formatında gösterilir.
    Mask=@(@"(\w|[.-])+@(\w|-)+\.(\w|-){2,4}")   Bu formata maskler.
    MaskMode=Regular Expression seçildi, maillere göre ayarlandı.


    private DxMaskedInput<string> _dxMaskedInput= ile içinin string olacağı belirtilir.

    @ref = _dxEmailEdit DxEmailEdit tipinin referansıdır. Bu DxEmailEdit'ı Kullanıcının dilediği gibi
        kullanabilmesini sağlar.

    bind olmadan kullanılınca tek yönlü bir bağlama olmuş olur. kullanıcı UI dan EmailEditin değerini
        değiştirmişse bind kullanılmazsa EmailEdit dönmemiş olur, bind iki yönlü bağlamayı sağlar.
        YANİ VERİ GİRİŞİ OLAN HER YERDE @bind KULLANILMAK ZORUNDA!!
    Text'e bind uygulanırsa mutlaka EmailEdit changed eventi olması gerekir. Bu nedenle ValueChanged
        eklendi.


    Value= EmailEdit parametresi, get geriye oluşturduğumuz _value değerini döndürür
        set yereldeki _value değeri value değerine eşitse değişiklik yapmadan return edilir.
        eğer farklıysa value değerini _value ye eşitler.

    ValueChanged Tetiklenebilir bir Eventtir, InvokeAsync çalıştır demektir.
        _value ile value değeri birbirine eşit olmadığında yani _value değeri değiştiğinde
        çalıştırılacak event olmuş olur. Yani bir değişiklik olduğunda değişikliği yakalar
        *** ÖNEMLİ ***

    OnAfterRenderAsync= ilk kez render olduğunda EmailEdit'e focuslanmasını sağlar.
*@
@code {

    private DxMaskedInput<string> _dxMaskedInput;
    private string _value;

    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string Value
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsFocus && Visible && firstRender)
            await _dxMaskedInput.FocusAsync();
    }

}